                                                        Rxjava1截取别人的笔记(对错未知)

参数解析
1.just(T...): 将传入一个或多个参数依次发送出来:Observable.just("a", "b", "c");

2.from(T[]) / from(Iterable<? extends T>) : 将传入的数组或 Iterable 拆分成具体对象后，依次发送出来。String[] words = {"a", "b", "c"};Observable observable = Observable.from(words);

3.Func1:  Func1 和 Action 的区别在于， Func1 包装的是有返回值的方法。另外，和 ActionX 一样， FuncX 也有多个，用于不同参数个数的方法。FuncX 和 ActionX 的区别在 FuncX 包装的是有返回值的方法。

4.map():转换功能通过FunCX(x,y) 方法将参数中的 String 对象转换成一个 Bitmap 对象后返回，而在经过 map() 方法后，事件的参数类型也由 String 转为了 Bitmap。

5.flatMap():和map()有点像just和from的关系. 并不能保证发送数据按照原顺序发送，如果需要可以使用concatMap进行取代(性能可能会下降在某种情况下)

6.switchMap():当源Observable发射一个新的数据项时，如果旧数据项订阅还未完成，就取消旧订阅数据和停止监视那个数据项产生的Observable,开始监视新的数据项.

7.lift():(可用用来封装4，5-但不建议使用)在 Observable 执行了 lift(Operator) 方法之后，会返回一个新的 Observable，这个新的 Observable 会像一个代理一样，负责接收原始的 Observable 发出的事件，并在处理后发送给 Subscriber.

8.filter():过滤不用的，筛选

9.take(3):取前三条 takeLast(3)：后三个

10.timeout()超时出错


11.  (1).自动创建 Subscriber ，并使用 onNextAction 来定义 onNext()    observable.subscribe(onNextAction);
    (2).自动创建 Subscriber ，并使用 onNextAction 和 onErrorAction 来定义 onNext() 和 onError()  observable.subscribe(onNextAction, onErrorAction);
    (3).自动创建 Subscriber ，并使用 onNextAction、 onErrorAction 和 onCompletedAction 来定义 onNext()、 onError() 和 onCompleted()
            observable.subscribe(onNextAction, onErrorAction, onCompletedAction);

12.Scheduler:调度器
    (0).subscribeOn():Observable.OnSubscribe 被激活时所处的线程。    事件产生的线程
    (0).observeOn():指定 Subscriber 所运行在的线程                   消费的线程
    (1).Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler.
    (2).Schedulers.newThread(): 总是启用新线程，并在新线程执行操作.
    (3).Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，
            因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程
    (4).Schedulers.computation(): 计算所使用的 Scheduler。用于循环，这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。
            不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU
    (5).Android 还有一个专用的 AndroidSchedulers.mainThread()，它指定的操作将在 Android 主线程运行。
    (6)observeOn() 指定的是它之后的操作所在的线程。因此如果有多次切换线程的需求，只要在每个想要切换线程的位置调用一次 observeOn() 即可.
    (7)subscribeOn()不同于 observeOn(),subscribeOn() 的位置放在哪里都可以，但它是只能调用一次的.
    (8)Observable.doOnSubscribe():它和 Subscriber.onStart() 同样是在 subscribe() 调用后而且在事件发送前执行，但区别在于它可以指定线程.

13.repeat(): 创建一个重复发射指定数据或数据序列的

14.defer():只有当订阅者订阅才创建Observable；为每个订阅创建一个新的 Observable.defer

15 range():创建一个发射指定范围的整数序列的Observable rang(10,5)--11,12,13,14,15

16 interval(): 创建一个按照给定的时间间隔发射整数序列的Observable.interval(1, TimeUnit.SECONDS); 每隔

17 timer(): 创建一个在给定的延时之后发射单个数据的Observable   几秒后就一次

18 distinct()：只允许还没有发射过的数据项通过 1,1,2,3 -- 1,2,3

19 filter() 操作符的一个特殊形式。它过滤一个Observable只返回指定类型的数据。

20 groupBy():分组 就是按照一种类型的key分组

21 flatMapIterable():它的作用是处理一些复杂的数据，接受一个Observable之后，返回一个Iterable，然后，这个Iterable会依次的传递给下面一层或者是Observer

22 buffer() : 操作符周期性地收集源Observable产生的结果到列表中，并把这个列表提交给订阅者，订阅者处理后，清空buffer列表，同时接收下一次收集的结果并提交给订阅者，周而复始.
                需要注意的是，一旦源Observable在产生结果的过程中出现异常，即使buffer已经存在收集到的结果，订阅者也会马上收到这个异常，并结束整个过程.
                buffer(count, skip)从原始Observable的第一项数据开始创建新的缓存，此后每当收到skip项数据，用count项数据填充缓存：
                开头的一项和后续的count-1项，它以列表(List)的形式发射缓存，取决于count和skip的值
                ，这些缓存可能会有重叠部分（比如skip < count时），也可能会有间隙（比如skip > count时）
                just("A","B","C").buffer(2) [A,B] [C]

23 skip(): 跳过开始的N项数据

24 elementAt(): 发射第N项数据

25 startWith(): 在数据序列的开头增加一项数据

26 Concat(): 在数据序列的末尾增加一项数据

27 merge(): 将多个Observable合并为一个 任何一个原始Observable的onError通知会被立即传递给观察者，而且会终止合并后的Observable。

26 mergeDelayError(): 合并多个Observables，让没有错误的Observable都完成后再发射错误通知

27 Zip():通过一个函数将多个Observables的发射物结合到一起，基于这个函数的结果为每个结合体发射单个数据项。1 2 3    A B C D  1A 2B 3C 发送少的

28 onErrorReturn() 让Observable遇到错误时候发生一个特殊的数据并且正常终止

29 onErrorResumeNext() 让Observable遇到错误时开始发射第二个Observable数据序列

30 Debounce() : 等多少秒后如果没有数据就会执行，如果在时间之内就抛掉之前的数据

一.SecondActivity里的笔记

1.一个Observable可以发出零个或者多个事件，知道结束或者出错。每发出一个事件，就会调用它Subscriber的onNext方法，最后调用Subscriber.onNext()或者Subscriber.onError()结束。

2.Rxjava的看起来很想设计模式中的观察者模式，但是有一点明显不同，那就是如果一个Observerble没有任何的的Subscriber，那么这个Observable是不会发出任何事件的

3.onStart(): 这是 Subscriber 增加的方法。它会在 subscribe 刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如数据的清零或重置。
    这是一个可选方法，默认情况下它的实现为空。需要注意的是，如果对准备工作的线程有要求（例如弹出一个显示进度的对话框，这必须在主线程执行）， onStart() 就不适用了

4.在不指定线程的情况下， RxJava 遵循的是线程不变的原则，即：在哪个线程调用 subscribe()，就在哪个线程生产事件；在哪个线程生产事件，就在哪个线程消费事件。如果需要切换线程，就需要用到 Scheduler （调度器）。

二. RxJava2Activity笔记

1.BackpressureStrategy:出现上下游流速不均衡的时候应该怎么处理的办法.
    0.当事件大于128时例如(1000),
        (0).96是个关键的值，在DROP,LATEST,如果事件10000,先request(n) n<96,在5s后(事件结束)再request(128),结果0-(n-1) (n+1)-127 共128个事件 其中LATEST会多一个9999.
        (1).当事件过多时DROP,LATEST,都是抛弃新产生的事件
        (2).DROP:会等128事件处理完才加入新事件当10000时间，先request(1) 10s后再请求128只有1-127
        (3).LATEST:处理n条后留下的一个空虚会等到请求它时放入当前最新的事件，当10000时间，先request(128) 10s后再请求128结果0-127, 222-317+9999
    1.ERROR:这种方式会在出现上下游流速不均衡的时候直接抛出一个异常,这个异常就是著名的MissingBackpressureException.
    2.BUFFER:它没有大小限制.
    3.DROP:直接把存不下的事件丢弃.
    4.LATEST:只保留最新的事件.
                                                                    RxBus
1.Subject:在 RxJava 里有一个对象 Subject，既是 Observable 又是 Observer，可以把 Subject 理解成一个管道或者转发器，数据从一端输入，然后从另一端输出.
        Subject 有好几种，这里可以使用最简单的 PublishSubject。一旦数据从一端传入，结果会里立刻从另一端输出.
        PublishSubject只有被订阅后才会把接收到的事件立刻发送给订阅者.

2.volitale:同步 http://blog.csdn.net/yueliangniao1/article/details/7227795

3. sample 取样

