                                                  KotLin
资料：
      (官网中文文档) https://www.kotlincn.net/docs/reference/basic-syntax.html
      listOf用法 http://www.cnblogs.com/figozhg/p/5031398.html
      所有集合 http://blog.csdn.net/coder_pig/article/details/53164424
      Kotlin http://shanghai.kotliner.cn/2017/02/12/2017-02-12-01/

1.val修饰变量是只读变量即只能赋值一次,再次赋值时就会编译错误,如果我们需要多次修改值就需要使用var.

2.switch 被 when替代了 else 相当于switch里的default

3.files?.size 只会在 files不为空时执行

4.kotlinThree : 如果你是开发 Android library 程序，建议你不要使用 Kotlin 代码。因为作为 library，如果使用它的工程是纯 Java 完成的，引入后会额外增大 200k 左右大小，同时它有可能会造成某些情况下编译异常。

5.Java 有 static 关键字，在 Kotlin 中没有这个关键字，你需要使用 @JvmStatic 替代这个关键字，同样，在 Kotlin 中也有很多的关键字是 Java 中是没有的。例如 in,is,data等。如果 Java 中使用了这些关键字，需要加上反引号(`)转义来避免冲突。

6.与 Java 不同，Kotlin 允许函数独立存在，而不必依赖于某个类，这类函数我们称之为包级别函数(Package-Level Functions)。
  为了兼容 Java，Kotlin 默认会将所有的包级别函数放在一个自动生成的叫 ExampleKt 的类中， 在 Java 中想要调用包级别函数时，需要通过这个类来调用。
  当然，也是可以自定义的，你只需要通过注解 @file:JvmName("Example") 即可将当前文件中的所有包级别函数放到一个自动生成的名为 Example 的类中。

7.Kotlin 默认会为每个变量和方法添加 final 修饰符。这么做的目的是为了程序运行的性能，其实在 Java 程序中，你也应该尽可能为每个类添加final。
  为每个类加了 final 也就是说，在 Kotlin 中默认每个类都是不可被继承的。如果你确定这个类是会被继承的，那么你需要给这个类添加 open 修饰符。

8.在 Kotlin 中,用 is 来判断一个对象是否是某个类的实例,用 as 来做强转。

9.由于 `Kotlin` 没有静态方法。在大多数情况下，官方建议是简单地使用 包级 函数。如果你需要写一个可以无需用一个类的实例来调用、但需要访问类内部的函数(例如,工厂方法或单利),你可以把它写成一个用 `companion` 修饰的对象内的方法。我们称 `companion` 修饰的对象为伴生对象。

10.Kotlin 的函数有一些非常有意思的特性，比如函数中再声明函数。

11.for (i in 1 until 100) { …… } // 半开区间：不包含 100。

12.Kotlin 的接口与 Java 8 类似，既包含抽象方法的声明，也包含 实现。与抽象类不同的是，接口无法保存状态。它可以有 属性但必须声明为抽象或提供访问器实现。

13. val jane = User("Jane", 35) //这样也行
    val (name, age) = jane
    println("$name, $age years of age") // 输出 "Jane, 35 years of age"

14.sealed:要声明一个密封类，需要在类名前面添加 sealed 修饰符。虽然密封类也可以 有子类，但是所有子类都必须在与密封类自身相同的文件中声明。

15.out:在 Kotlin 中，有一种方法向编译器解释这种情况。这称为声明处型变：我们可以标注 Source 的类型参数 T 来确保它仅从 Source<T> 成员中返回（生产），并从不被消费。为此，我们提供 out 修饰符。

16.类可以标记为 inner 以便能够访问外部类的成员。内部类会带有一个对外部类的对象的引用。

17.by:委托 https://www.kotlincn.net/docs/reference/delegation.html .

18. lazy() 是接受一个 lambda 并返回一个 Lazy <T> 实例的函数，返回的实例可以作为实现延迟属性的委托： 第一次调用 get() 会执行已传递给 lazy() 的 lamda 表达式并记录结果， 后续调用 get() 只是返回记录的结果。

19. infix() 中缀表示法

20. 伸展（spread）操作符（在数组前面加 *）
    val a = arrayOf(1, 2, 3)
    val list = asList(-1, 0, *a, 4)

21. inline 修饰符影响函数本身和传给它的 lambda 表达式：所有这些都将内联 到调用处。

22. 可能遍历一个映射（map）最好的方式就是这样：
    for ((key, value) in map) {
       // 使用该 key、value 做些事情
    }

23. 下划线用于未使用的变量 如果在解构声明中你不需要某个变量，那么可以用下划线取代其名称 val (_, status) = getResult().

24. downTo:如果你想倒序迭代数字呢？也很简单。你可以使用标准库中定义的 downTo() 函数。

25. step(): 间隔

26. until:要创建一个不包括其结束元素的区间，可以使用 until 函数
    for (i in 1 until 10) {   // i in [1, 10) 排除了 10
         println(i)
    }

27. this@A : https://www.kotlincn.net/docs/reference/this-expressions.html .

28. 引用相等由 ===（以及其否定形式 !==）操作判断。a === b 当且仅当 a 和 b 指向同一个对象时求值为 true。
    结构相等由 ==（以及其否定形式 !=）操作判断。按照惯例，像 a == b 这样的表达式会翻译成
    a?.equals(b) ?: (b === null):
    加：=== 指向地址相同，数据类型相同，数据相同。
    加：== 数据类型相同，数据相同：a: Long = 1 , b: Int = 1 , a==b false

39. 对于非空类型的属性是必须初始化的。如果我们希望延迟进行初始化，就可以使用lateinit关键字了

30. 注解: https://www.kotlincn.net/docs/reference/annotations.html

31. |使用or代替了

32 ?会禁止运行后面的如 data?.size() 为 null 加问好表示可为空

33 !! 则我会处理你无效出去

34 MainActivity.this = this@MainActivity

35 if (x in 1..y+1)使用 in 运算符来检测某个数字是否在指定区间内

36 if (-1 !in 0..list.lastIndex): 检测某个数字是否在指定区间外

37 data class Student(val name: String , var age: Int,val num: Int = 10)初始化数据

38 fun String.spaceToCamelCase() { …… } "a".spaceToCamelCase() 扩展函数

39 files.size ?: "empty" 新模式，忘记叫啥了

40 val value = ……
   value?.let {
       …… // 代码会执行到此处, 假如data不为null
   }

41 val result1 = try { 1/0 } catch (e: ArithmeticException) { 2 }  : =2

42 对一个对象实例调用多个方法 (with)
```
class Turtle {
    fun penDown()
    fun penUp()
    fun turn(degrees: Double)
    fun forward(pixels: Double)
}

val myTurtle = Turtle()
with(myTurtle) { // 画一个 100 像素的正方形
    penDown()
    for(i in 1..4) {
        forward(100.0)
        turn(90.0)
    }
    penUp()
}

```

43 Java 7 的 try with resources
```
val stream = Files.newInputStream(Paths.get("/some/file.txt"))
stream.buffered().reader().use { reader ->
    println(reader.readText())
}

```
44 位移
```
shl(bits) – 有符号左移 (Java 的 <<)
shr(bits) – 有符号右移 (Java 的 >>)
ushr(bits) – 无符号右移 (Java 的 >>>)
and(bits) – 位与 (|)
or(bits) – 位或 (&)
xor(bits) – 位异或
inv() – 位非

|| – 短路逻辑或
&& – 短路逻辑与
! - 逻辑非

```

45 集合和数组
```
arrayOfNulls() 可以用于创建一个指定大小的、所有元素都为空的数组。
val asc = Array(5, { i -> (i * i).toString() })

for ((index,item) in lists.withIndex())
```

46 trimMargin(">")去掉字符串里的>

47 返回和跳转Break 与 Continue 标签 @loop表达式加标签

48 构造函数
```
1. 初始化块按照它们出现在类体中的顺序执行，与属性初始化器交织在一起
2. 与普通属性一样，主构造函数中声明的属性可以是可变的（var）或只读的（val）
3. 如果构造函数有注解或可见性修饰符，这个 constructor 关键字是必需的，并且这些修饰符在它前面
4. 次构造函数必须是主构造函数的扩展或增加参数
5. 如果一个非抽象类没有声明任何（主或次）构造函数，它会有一个生成的不带参数的主构造函数。构造函数的可见性是 public。如果你不希望你的类有一个公有构造函数，你需要声明一个带有非默认可见性的空的主构造函数
class DontCreateMe private constructor () { }
6. Derived.v() 函数上必须加上 override标注。如果没写，编译器将会报错。 如果函数没有标注 open 如 Base.nv()，则子类中不允许定义相同签名的函数， 不论加不加 override。在一个 final 类中（没有用 open 标注的类），开放成员是禁止的。
7. 标记为 override 的成员本身是开放的，也就是说，它可以在子类中覆盖。如果你想禁止再次覆盖，使用 final 关键字
8. 看: package com.wx.kotlindemo.bean
9. 在一个内部类中访问外部类的超类，可以通过由外部类名限定的 super 关键字来实现：super@Outer：

```

49 const 代表常量

50 检测一个 lateinit var 是否已初始化（自 1.2 起）.isInitialized

51 接口 Kotlin 的接口与 Java 8 类似，既包含抽象方法的声明，也包含实现。与抽象类不同的是，接口无法保存状态。它可以有属性但必须声明为抽象或提供访问器实现。

52 声明一个扩展函数，我们需要用一个 接收者类型 也就是被扩展的类型来作为他的前缀。

53 out修饰符称为型变注解，并且由于它在类型参数声明处提供，所以我们讲声明处型变。 这与 Java 的使用处型变相反，其类型用途通配符使得类型协变。
in: 它使得一个类型参数逆变：只可以被消费而不可以被生产。逆变类型的一个很好的例子是 Comparable.
in T：来确保Source的成员函数只能消费T类型，而不能返回T类型，我们也称in修饰的参数为“消费者”
out R：来确保Source的成员函数只能返回R类型，而不能消费R类型，我们也称out修饰的参数为“生产者”
```
internal interface Source<in T, out R> {
    fun mapT(t: T): Unit
    fun nextR(): R
}
编译通过！

引用：关于out和in这两个关键字，我自己是这么记忆的。
out是用来输出的，所以只能作为返回类型；in是用来输入的，
所以只能作为消费类型。而从上面的copy方法中可以看出，
out类似于java中的extends，用来界定类型上限，
in类似于java中的super，用来界定类型下限

//上面是对的
我的理解： out Activity 可以Activity及Activity父类 : 协变
in Activity必须是Activity不可以为他的父类 : 逆变
```

54 将 Kotlin 中是关键字的 Java 标识符进行转义 foo.`is`(bar).

55 类可以标记为 inner 以便能够访问外部类的成员.

56 reified 将内联函数的类型参数标记为在运行时可访问

57 请注意，即使伴生对象的成员看起来像其他语言的静态成员，在运行时他们仍然是真实对象的实例成员，而且，例如还可以实现接口.

58 委托 by
```
属性委托
默认情况下，对于 lazy 属性的求值是同步锁的（synchronized）
val lazyValue: String by lazy {
    println("computed!")
    "Hello"
}
fun main(args: Array<String>) {
    println(lazyValue)
    println(lazyValue)
}
computed!
Hello
Hello

把属性储存在映射中
class User(val map: Map<String, Any?>) {
    val name: String by map
    val age: Int     by map
}
val user = User(mapOf(
    "name" to "John Doe",
    "age"  to 25
))
println(user.name) //Prints "John Doe"
println(user.age)  //Prints 25

```

59 Delegates.observable : 接受两个参数：初始值和修改时处理程序（handler）。
   每当我们给属性赋值时会调用该处理程序（在赋值后执行）。
   它有三个参数：被赋值的属性、旧值和新值。

60 val x: String ?= y as? String: 为了避免抛出异常，可以用 as? 这个安全转换符，这样失败就会返回 null.

61 为了在范围外部(一个类，或者表达式函数，或者带标签的扩展字面函数)访问 this ，我们需要在使用 this@lable 作为 lable

62 相等
```
参照相等是通过 === 操作符判断的(不等是!== ) a===b 只有 a b 指向同一个对象是判别才成立。
另外，你可以使用内联函数 identityEquals() 判断参照相等
a.identityEquals(b)
a identityEquals b
结构相等是通过 == 判断的。像 a == b 将会翻译成
a?.equals(b) ?: b === null

```

63 运算符重载
```
+a	a.plus() : arrays.plus(item) 会创建一个新的数组,原来数组不变 a+b
-a	a.minus() : 同理 a-b
!a	a.not()

a++	a.inc() + see below : 效果好像是++a,而且原理的数不变
a--	a.dec() + see below

```

64 b?.length(): 如果 b 不为空则返回长度，否则返回空。这个表达式的的类型是 Int?

65 bob?.department?.head?.name 这样的调用链在任何一个属性为空都会返回空

66 val l = b.length()?: -1 如果 ?: 左边表达式不为空则返回

67 没有异常检测

68 集合
```
List<out T> : 只读的 类型是一个提供只读操作如 size、get等的接口
MutableList : 可变的
Kotlin 没有专门的语法结构创建 list 或 set。 要用标准库的方法，如 listOf()、 mutableListOf()、 setOf()、 mutableSetOf()
目前 listOf 方法是使用 array list 实现的，但是未来可以利用它们知道自己不能变的事实，返回更节约内存的完全不可变的集合类型。
lists11.toList()： 扩展方法只是复制列表项，因此返回的 list 保证永远不会改变。




```